#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

// 二叉树
struct BinTreeNode {
    char data;
    int freq;
    BinTreeNode* left;
    BinTreeNode* right;

    BinTreeNode(char d, int f) : data(d), freq(f), left(nullptr), right(nullptr) {}
};

// 比较函数用于优先队列
struct Compare {
    bool operator()(BinTreeNode* a, BinTreeNode* b) {
        return a->freq > b->freq;
    }
};

// BinTree
class BinTree {
public:
    BinTreeNode* root;

    BinTree() : root(nullptr) {}
};

// HuffTree
class HuffTree {
public:
    BinTree buildHuffmanTree(const unordered_map<char, int>& freqMap) {
        priority_queue<BinTreeNode*, vector<BinTreeNode*>, Compare> pq;

        // 将每个字符及其频率作为叶节点放入优先队列
        for (const auto& pair : freqMap) {
            pq.push(new BinTreeNode(pair.first, pair.second));
        }

        while (pq.size() > 1) {
            BinTreeNode* left = pq.top();
            pq.pop();
            BinTreeNode* right = pq.top();
            pq.pop();

            BinTreeNode* newNode = new BinTreeNode('\0', left->freq + right->freq);
            newNode->left = left;
            newNode->right = right;

            pq.push(newNode);
        }

        BinTree tree;
        tree.root = pq.top();
        pq.pop();

        return tree;
    }
};

// 借助位图类Bitmap定义Huffman二进制编码串类型HuffCode
class HuffCode {
public:
    string encode(const BinTreeNode* node, char data, string code = "") {
        if (!node)
            return "";

        if (node->data == data)
            return code;

        string leftCode = encode(node->left, data, code + "0");
        if (leftCode!= "")
            return leftCode;

        return encode(node->right, data, code + "1");
    }
};

// 统计字符频率
unordered_map<char, int> countFrequencies(const string& text) {
    unordered_map<char, int> freqMap;
    for (char c : text) {
        if (isalpha(c)) {
            char lowerC = tolower(c);
            freqMap[lowerC]++;
        }
    }
    return freqMap;
}

int main() {
    string text = "I have a dream. This is a great speech.";
    unordered_map<char, int> freqMap = countFrequencies(text);
    HuffTree huffTree;
    BinTree huffmanTree = huffTree.buildHuffmanTree(freqMap);
    HuffCode huffCode;

    string wordToEncode = "dream";
    for (char c : wordToEncode) {
        string encodedChar = huffCode.encode(huffmanTree.root, tolower(c));
        cout << encodedChar;
    }
    cout << endl;

    return 0;
}
